
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Alocacao
 * 
 */
export type Alocacao = $Result.DefaultSelection<Prisma.$AlocacaoPayload>
/**
 * Model Automoveis
 * 
 */
export type Automoveis = $Result.DefaultSelection<Prisma.$AutomoveisPayload>
/**
 * Model Concessionarias
 * 
 */
export type Concessionarias = $Result.DefaultSelection<Prisma.$ConcessionariasPayload>
/**
 * Model clientes
 * 
 */
export type clientes = $Result.DefaultSelection<Prisma.$clientesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Alocacaos
 * const alocacaos = await prisma.alocacao.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Alocacaos
   * const alocacaos = await prisma.alocacao.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.alocacao`: Exposes CRUD operations for the **Alocacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alocacaos
    * const alocacaos = await prisma.alocacao.findMany()
    * ```
    */
  get alocacao(): Prisma.AlocacaoDelegate<ExtArgs>;

  /**
   * `prisma.automoveis`: Exposes CRUD operations for the **Automoveis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Automoveis
    * const automoveis = await prisma.automoveis.findMany()
    * ```
    */
  get automoveis(): Prisma.AutomoveisDelegate<ExtArgs>;

  /**
   * `prisma.concessionarias`: Exposes CRUD operations for the **Concessionarias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Concessionarias
    * const concessionarias = await prisma.concessionarias.findMany()
    * ```
    */
  get concessionarias(): Prisma.ConcessionariasDelegate<ExtArgs>;

  /**
   * `prisma.clientes`: Exposes CRUD operations for the **clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.clientesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: 08713a93b99d58f31485621c634b04983ae01d95
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Alocacao: 'Alocacao',
    Automoveis: 'Automoveis',
    Concessionarias: 'Concessionarias',
    clientes: 'clientes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "alocacao" | "automoveis" | "concessionarias" | "clientes"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Alocacao: {
        payload: Prisma.$AlocacaoPayload<ExtArgs>
        fields: Prisma.AlocacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlocacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlocacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>
          }
          findFirst: {
            args: Prisma.AlocacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlocacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>
          }
          findMany: {
            args: Prisma.AlocacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>[]
          }
          create: {
            args: Prisma.AlocacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>
          }
          createMany: {
            args: Prisma.AlocacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlocacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>
          }
          update: {
            args: Prisma.AlocacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>
          }
          deleteMany: {
            args: Prisma.AlocacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlocacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlocacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlocacaoPayload>
          }
          aggregate: {
            args: Prisma.AlocacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlocacao>
          }
          groupBy: {
            args: Prisma.AlocacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlocacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlocacaoCountArgs<ExtArgs>
            result: $Utils.Optional<AlocacaoCountAggregateOutputType> | number
          }
        }
      }
      Automoveis: {
        payload: Prisma.$AutomoveisPayload<ExtArgs>
        fields: Prisma.AutomoveisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AutomoveisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AutomoveisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>
          }
          findFirst: {
            args: Prisma.AutomoveisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AutomoveisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>
          }
          findMany: {
            args: Prisma.AutomoveisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>[]
          }
          create: {
            args: Prisma.AutomoveisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>
          }
          createMany: {
            args: Prisma.AutomoveisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AutomoveisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>
          }
          update: {
            args: Prisma.AutomoveisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>
          }
          deleteMany: {
            args: Prisma.AutomoveisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AutomoveisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AutomoveisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutomoveisPayload>
          }
          aggregate: {
            args: Prisma.AutomoveisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAutomoveis>
          }
          groupBy: {
            args: Prisma.AutomoveisGroupByArgs<ExtArgs>
            result: $Utils.Optional<AutomoveisGroupByOutputType>[]
          }
          count: {
            args: Prisma.AutomoveisCountArgs<ExtArgs>
            result: $Utils.Optional<AutomoveisCountAggregateOutputType> | number
          }
        }
      }
      Concessionarias: {
        payload: Prisma.$ConcessionariasPayload<ExtArgs>
        fields: Prisma.ConcessionariasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConcessionariasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConcessionariasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>
          }
          findFirst: {
            args: Prisma.ConcessionariasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConcessionariasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>
          }
          findMany: {
            args: Prisma.ConcessionariasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>[]
          }
          create: {
            args: Prisma.ConcessionariasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>
          }
          createMany: {
            args: Prisma.ConcessionariasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConcessionariasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>
          }
          update: {
            args: Prisma.ConcessionariasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>
          }
          deleteMany: {
            args: Prisma.ConcessionariasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConcessionariasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConcessionariasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConcessionariasPayload>
          }
          aggregate: {
            args: Prisma.ConcessionariasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConcessionarias>
          }
          groupBy: {
            args: Prisma.ConcessionariasGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConcessionariasGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConcessionariasCountArgs<ExtArgs>
            result: $Utils.Optional<ConcessionariasCountAggregateOutputType> | number
          }
        }
      }
      clientes: {
        payload: Prisma.$clientesPayload<ExtArgs>
        fields: Prisma.clientesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          findFirst: {
            args: Prisma.clientesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          findMany: {
            args: Prisma.clientesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>[]
          }
          create: {
            args: Prisma.clientesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          createMany: {
            args: Prisma.clientesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          update: {
            args: Prisma.clientesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          deleteMany: {
            args: Prisma.clientesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientesPayload>
          }
          aggregate: {
            args: Prisma.ClientesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientes>
          }
          groupBy: {
            args: Prisma.clientesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientesGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientesCountArgs<ExtArgs>
            result: $Utils.Optional<ClientesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AutomoveisCountOutputType
   */

  export type AutomoveisCountOutputType = {
    alocacoes: number
  }

  export type AutomoveisCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alocacoes?: boolean | AutomoveisCountOutputTypeCountAlocacoesArgs
  }

  // Custom InputTypes
  /**
   * AutomoveisCountOutputType without action
   */
  export type AutomoveisCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutomoveisCountOutputType
     */
    select?: AutomoveisCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AutomoveisCountOutputType without action
   */
  export type AutomoveisCountOutputTypeCountAlocacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlocacaoWhereInput
  }


  /**
   * Count Type ConcessionariasCountOutputType
   */

  export type ConcessionariasCountOutputType = {
    alocacoes: number
  }

  export type ConcessionariasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alocacoes?: boolean | ConcessionariasCountOutputTypeCountAlocacoesArgs
  }

  // Custom InputTypes
  /**
   * ConcessionariasCountOutputType without action
   */
  export type ConcessionariasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConcessionariasCountOutputType
     */
    select?: ConcessionariasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConcessionariasCountOutputType without action
   */
  export type ConcessionariasCountOutputTypeCountAlocacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlocacaoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Alocacao
   */

  export type AggregateAlocacao = {
    _count: AlocacaoCountAggregateOutputType | null
    _avg: AlocacaoAvgAggregateOutputType | null
    _sum: AlocacaoSumAggregateOutputType | null
    _min: AlocacaoMinAggregateOutputType | null
    _max: AlocacaoMaxAggregateOutputType | null
  }

  export type AlocacaoAvgAggregateOutputType = {
    id: number | null
    quantidade: number | null
    automovelId: number | null
    concessionariaId: number | null
  }

  export type AlocacaoSumAggregateOutputType = {
    id: number | null
    quantidade: number | null
    automovelId: number | null
    concessionariaId: number | null
  }

  export type AlocacaoMinAggregateOutputType = {
    id: number | null
    area: string | null
    quantidade: number | null
    automovelId: number | null
    concessionariaId: number | null
  }

  export type AlocacaoMaxAggregateOutputType = {
    id: number | null
    area: string | null
    quantidade: number | null
    automovelId: number | null
    concessionariaId: number | null
  }

  export type AlocacaoCountAggregateOutputType = {
    id: number
    area: number
    quantidade: number
    automovelId: number
    concessionariaId: number
    _all: number
  }


  export type AlocacaoAvgAggregateInputType = {
    id?: true
    quantidade?: true
    automovelId?: true
    concessionariaId?: true
  }

  export type AlocacaoSumAggregateInputType = {
    id?: true
    quantidade?: true
    automovelId?: true
    concessionariaId?: true
  }

  export type AlocacaoMinAggregateInputType = {
    id?: true
    area?: true
    quantidade?: true
    automovelId?: true
    concessionariaId?: true
  }

  export type AlocacaoMaxAggregateInputType = {
    id?: true
    area?: true
    quantidade?: true
    automovelId?: true
    concessionariaId?: true
  }

  export type AlocacaoCountAggregateInputType = {
    id?: true
    area?: true
    quantidade?: true
    automovelId?: true
    concessionariaId?: true
    _all?: true
  }

  export type AlocacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alocacao to aggregate.
     */
    where?: AlocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alocacaos to fetch.
     */
    orderBy?: AlocacaoOrderByWithRelationInput | AlocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alocacaos
    **/
    _count?: true | AlocacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlocacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlocacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlocacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlocacaoMaxAggregateInputType
  }

  export type GetAlocacaoAggregateType<T extends AlocacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateAlocacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlocacao[P]>
      : GetScalarType<T[P], AggregateAlocacao[P]>
  }




  export type AlocacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlocacaoWhereInput
    orderBy?: AlocacaoOrderByWithAggregationInput | AlocacaoOrderByWithAggregationInput[]
    by: AlocacaoScalarFieldEnum[] | AlocacaoScalarFieldEnum
    having?: AlocacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlocacaoCountAggregateInputType | true
    _avg?: AlocacaoAvgAggregateInputType
    _sum?: AlocacaoSumAggregateInputType
    _min?: AlocacaoMinAggregateInputType
    _max?: AlocacaoMaxAggregateInputType
  }

  export type AlocacaoGroupByOutputType = {
    id: number
    area: string
    quantidade: number
    automovelId: number
    concessionariaId: number
    _count: AlocacaoCountAggregateOutputType | null
    _avg: AlocacaoAvgAggregateOutputType | null
    _sum: AlocacaoSumAggregateOutputType | null
    _min: AlocacaoMinAggregateOutputType | null
    _max: AlocacaoMaxAggregateOutputType | null
  }

  type GetAlocacaoGroupByPayload<T extends AlocacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlocacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlocacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlocacaoGroupByOutputType[P]>
            : GetScalarType<T[P], AlocacaoGroupByOutputType[P]>
        }
      >
    >


  export type AlocacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    area?: boolean
    quantidade?: boolean
    automovelId?: boolean
    concessionariaId?: boolean
    automovel?: boolean | AutomoveisDefaultArgs<ExtArgs>
    concessionaria?: boolean | ConcessionariasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alocacao"]>


  export type AlocacaoSelectScalar = {
    id?: boolean
    area?: boolean
    quantidade?: boolean
    automovelId?: boolean
    concessionariaId?: boolean
  }

  export type AlocacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    automovel?: boolean | AutomoveisDefaultArgs<ExtArgs>
    concessionaria?: boolean | ConcessionariasDefaultArgs<ExtArgs>
  }

  export type $AlocacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alocacao"
    objects: {
      automovel: Prisma.$AutomoveisPayload<ExtArgs>
      concessionaria: Prisma.$ConcessionariasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      area: string
      quantidade: number
      automovelId: number
      concessionariaId: number
    }, ExtArgs["result"]["alocacao"]>
    composites: {}
  }

  type AlocacaoGetPayload<S extends boolean | null | undefined | AlocacaoDefaultArgs> = $Result.GetResult<Prisma.$AlocacaoPayload, S>

  type AlocacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlocacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlocacaoCountAggregateInputType | true
    }

  export interface AlocacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alocacao'], meta: { name: 'Alocacao' } }
    /**
     * Find zero or one Alocacao that matches the filter.
     * @param {AlocacaoFindUniqueArgs} args - Arguments to find a Alocacao
     * @example
     * // Get one Alocacao
     * const alocacao = await prisma.alocacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlocacaoFindUniqueArgs>(args: SelectSubset<T, AlocacaoFindUniqueArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alocacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlocacaoFindUniqueOrThrowArgs} args - Arguments to find a Alocacao
     * @example
     * // Get one Alocacao
     * const alocacao = await prisma.alocacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlocacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, AlocacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alocacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoFindFirstArgs} args - Arguments to find a Alocacao
     * @example
     * // Get one Alocacao
     * const alocacao = await prisma.alocacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlocacaoFindFirstArgs>(args?: SelectSubset<T, AlocacaoFindFirstArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alocacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoFindFirstOrThrowArgs} args - Arguments to find a Alocacao
     * @example
     * // Get one Alocacao
     * const alocacao = await prisma.alocacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlocacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, AlocacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alocacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alocacaos
     * const alocacaos = await prisma.alocacao.findMany()
     * 
     * // Get first 10 Alocacaos
     * const alocacaos = await prisma.alocacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alocacaoWithIdOnly = await prisma.alocacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlocacaoFindManyArgs>(args?: SelectSubset<T, AlocacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alocacao.
     * @param {AlocacaoCreateArgs} args - Arguments to create a Alocacao.
     * @example
     * // Create one Alocacao
     * const Alocacao = await prisma.alocacao.create({
     *   data: {
     *     // ... data to create a Alocacao
     *   }
     * })
     * 
     */
    create<T extends AlocacaoCreateArgs>(args: SelectSubset<T, AlocacaoCreateArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alocacaos.
     * @param {AlocacaoCreateManyArgs} args - Arguments to create many Alocacaos.
     * @example
     * // Create many Alocacaos
     * const alocacao = await prisma.alocacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlocacaoCreateManyArgs>(args?: SelectSubset<T, AlocacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alocacao.
     * @param {AlocacaoDeleteArgs} args - Arguments to delete one Alocacao.
     * @example
     * // Delete one Alocacao
     * const Alocacao = await prisma.alocacao.delete({
     *   where: {
     *     // ... filter to delete one Alocacao
     *   }
     * })
     * 
     */
    delete<T extends AlocacaoDeleteArgs>(args: SelectSubset<T, AlocacaoDeleteArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alocacao.
     * @param {AlocacaoUpdateArgs} args - Arguments to update one Alocacao.
     * @example
     * // Update one Alocacao
     * const alocacao = await prisma.alocacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlocacaoUpdateArgs>(args: SelectSubset<T, AlocacaoUpdateArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alocacaos.
     * @param {AlocacaoDeleteManyArgs} args - Arguments to filter Alocacaos to delete.
     * @example
     * // Delete a few Alocacaos
     * const { count } = await prisma.alocacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlocacaoDeleteManyArgs>(args?: SelectSubset<T, AlocacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alocacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alocacaos
     * const alocacao = await prisma.alocacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlocacaoUpdateManyArgs>(args: SelectSubset<T, AlocacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alocacao.
     * @param {AlocacaoUpsertArgs} args - Arguments to update or create a Alocacao.
     * @example
     * // Update or create a Alocacao
     * const alocacao = await prisma.alocacao.upsert({
     *   create: {
     *     // ... data to create a Alocacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alocacao we want to update
     *   }
     * })
     */
    upsert<T extends AlocacaoUpsertArgs>(args: SelectSubset<T, AlocacaoUpsertArgs<ExtArgs>>): Prisma__AlocacaoClient<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alocacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoCountArgs} args - Arguments to filter Alocacaos to count.
     * @example
     * // Count the number of Alocacaos
     * const count = await prisma.alocacao.count({
     *   where: {
     *     // ... the filter for the Alocacaos we want to count
     *   }
     * })
    **/
    count<T extends AlocacaoCountArgs>(
      args?: Subset<T, AlocacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlocacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alocacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlocacaoAggregateArgs>(args: Subset<T, AlocacaoAggregateArgs>): Prisma.PrismaPromise<GetAlocacaoAggregateType<T>>

    /**
     * Group by Alocacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlocacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlocacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlocacaoGroupByArgs['orderBy'] }
        : { orderBy?: AlocacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlocacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlocacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alocacao model
   */
  readonly fields: AlocacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alocacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlocacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    automovel<T extends AutomoveisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AutomoveisDefaultArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    concessionaria<T extends ConcessionariasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConcessionariasDefaultArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alocacao model
   */ 
  interface AlocacaoFieldRefs {
    readonly id: FieldRef<"Alocacao", 'Int'>
    readonly area: FieldRef<"Alocacao", 'String'>
    readonly quantidade: FieldRef<"Alocacao", 'Int'>
    readonly automovelId: FieldRef<"Alocacao", 'Int'>
    readonly concessionariaId: FieldRef<"Alocacao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Alocacao findUnique
   */
  export type AlocacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * Filter, which Alocacao to fetch.
     */
    where: AlocacaoWhereUniqueInput
  }

  /**
   * Alocacao findUniqueOrThrow
   */
  export type AlocacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * Filter, which Alocacao to fetch.
     */
    where: AlocacaoWhereUniqueInput
  }

  /**
   * Alocacao findFirst
   */
  export type AlocacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * Filter, which Alocacao to fetch.
     */
    where?: AlocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alocacaos to fetch.
     */
    orderBy?: AlocacaoOrderByWithRelationInput | AlocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alocacaos.
     */
    cursor?: AlocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alocacaos.
     */
    distinct?: AlocacaoScalarFieldEnum | AlocacaoScalarFieldEnum[]
  }

  /**
   * Alocacao findFirstOrThrow
   */
  export type AlocacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * Filter, which Alocacao to fetch.
     */
    where?: AlocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alocacaos to fetch.
     */
    orderBy?: AlocacaoOrderByWithRelationInput | AlocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alocacaos.
     */
    cursor?: AlocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alocacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alocacaos.
     */
    distinct?: AlocacaoScalarFieldEnum | AlocacaoScalarFieldEnum[]
  }

  /**
   * Alocacao findMany
   */
  export type AlocacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * Filter, which Alocacaos to fetch.
     */
    where?: AlocacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alocacaos to fetch.
     */
    orderBy?: AlocacaoOrderByWithRelationInput | AlocacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alocacaos.
     */
    cursor?: AlocacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alocacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alocacaos.
     */
    skip?: number
    distinct?: AlocacaoScalarFieldEnum | AlocacaoScalarFieldEnum[]
  }

  /**
   * Alocacao create
   */
  export type AlocacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Alocacao.
     */
    data: XOR<AlocacaoCreateInput, AlocacaoUncheckedCreateInput>
  }

  /**
   * Alocacao createMany
   */
  export type AlocacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alocacaos.
     */
    data: AlocacaoCreateManyInput | AlocacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alocacao update
   */
  export type AlocacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Alocacao.
     */
    data: XOR<AlocacaoUpdateInput, AlocacaoUncheckedUpdateInput>
    /**
     * Choose, which Alocacao to update.
     */
    where: AlocacaoWhereUniqueInput
  }

  /**
   * Alocacao updateMany
   */
  export type AlocacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alocacaos.
     */
    data: XOR<AlocacaoUpdateManyMutationInput, AlocacaoUncheckedUpdateManyInput>
    /**
     * Filter which Alocacaos to update
     */
    where?: AlocacaoWhereInput
  }

  /**
   * Alocacao upsert
   */
  export type AlocacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Alocacao to update in case it exists.
     */
    where: AlocacaoWhereUniqueInput
    /**
     * In case the Alocacao found by the `where` argument doesn't exist, create a new Alocacao with this data.
     */
    create: XOR<AlocacaoCreateInput, AlocacaoUncheckedCreateInput>
    /**
     * In case the Alocacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlocacaoUpdateInput, AlocacaoUncheckedUpdateInput>
  }

  /**
   * Alocacao delete
   */
  export type AlocacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    /**
     * Filter which Alocacao to delete.
     */
    where: AlocacaoWhereUniqueInput
  }

  /**
   * Alocacao deleteMany
   */
  export type AlocacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alocacaos to delete
     */
    where?: AlocacaoWhereInput
  }

  /**
   * Alocacao without action
   */
  export type AlocacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
  }


  /**
   * Model Automoveis
   */

  export type AggregateAutomoveis = {
    _count: AutomoveisCountAggregateOutputType | null
    _avg: AutomoveisAvgAggregateOutputType | null
    _sum: AutomoveisSumAggregateOutputType | null
    _min: AutomoveisMinAggregateOutputType | null
    _max: AutomoveisMaxAggregateOutputType | null
  }

  export type AutomoveisAvgAggregateOutputType = {
    id: number | null
    preco: number | null
  }

  export type AutomoveisSumAggregateOutputType = {
    id: number | null
    preco: number | null
  }

  export type AutomoveisMinAggregateOutputType = {
    id: number | null
    modelo: string | null
    preco: number | null
  }

  export type AutomoveisMaxAggregateOutputType = {
    id: number | null
    modelo: string | null
    preco: number | null
  }

  export type AutomoveisCountAggregateOutputType = {
    id: number
    modelo: number
    preco: number
    _all: number
  }


  export type AutomoveisAvgAggregateInputType = {
    id?: true
    preco?: true
  }

  export type AutomoveisSumAggregateInputType = {
    id?: true
    preco?: true
  }

  export type AutomoveisMinAggregateInputType = {
    id?: true
    modelo?: true
    preco?: true
  }

  export type AutomoveisMaxAggregateInputType = {
    id?: true
    modelo?: true
    preco?: true
  }

  export type AutomoveisCountAggregateInputType = {
    id?: true
    modelo?: true
    preco?: true
    _all?: true
  }

  export type AutomoveisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Automoveis to aggregate.
     */
    where?: AutomoveisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automoveis to fetch.
     */
    orderBy?: AutomoveisOrderByWithRelationInput | AutomoveisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AutomoveisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automoveis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automoveis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Automoveis
    **/
    _count?: true | AutomoveisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AutomoveisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AutomoveisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AutomoveisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AutomoveisMaxAggregateInputType
  }

  export type GetAutomoveisAggregateType<T extends AutomoveisAggregateArgs> = {
        [P in keyof T & keyof AggregateAutomoveis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAutomoveis[P]>
      : GetScalarType<T[P], AggregateAutomoveis[P]>
  }




  export type AutomoveisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutomoveisWhereInput
    orderBy?: AutomoveisOrderByWithAggregationInput | AutomoveisOrderByWithAggregationInput[]
    by: AutomoveisScalarFieldEnum[] | AutomoveisScalarFieldEnum
    having?: AutomoveisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AutomoveisCountAggregateInputType | true
    _avg?: AutomoveisAvgAggregateInputType
    _sum?: AutomoveisSumAggregateInputType
    _min?: AutomoveisMinAggregateInputType
    _max?: AutomoveisMaxAggregateInputType
  }

  export type AutomoveisGroupByOutputType = {
    id: number
    modelo: string
    preco: number
    _count: AutomoveisCountAggregateOutputType | null
    _avg: AutomoveisAvgAggregateOutputType | null
    _sum: AutomoveisSumAggregateOutputType | null
    _min: AutomoveisMinAggregateOutputType | null
    _max: AutomoveisMaxAggregateOutputType | null
  }

  type GetAutomoveisGroupByPayload<T extends AutomoveisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AutomoveisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AutomoveisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AutomoveisGroupByOutputType[P]>
            : GetScalarType<T[P], AutomoveisGroupByOutputType[P]>
        }
      >
    >


  export type AutomoveisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelo?: boolean
    preco?: boolean
    alocacoes?: boolean | Automoveis$alocacoesArgs<ExtArgs>
    _count?: boolean | AutomoveisCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["automoveis"]>


  export type AutomoveisSelectScalar = {
    id?: boolean
    modelo?: boolean
    preco?: boolean
  }

  export type AutomoveisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alocacoes?: boolean | Automoveis$alocacoesArgs<ExtArgs>
    _count?: boolean | AutomoveisCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AutomoveisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Automoveis"
    objects: {
      alocacoes: Prisma.$AlocacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      modelo: string
      preco: number
    }, ExtArgs["result"]["automoveis"]>
    composites: {}
  }

  type AutomoveisGetPayload<S extends boolean | null | undefined | AutomoveisDefaultArgs> = $Result.GetResult<Prisma.$AutomoveisPayload, S>

  type AutomoveisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AutomoveisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AutomoveisCountAggregateInputType | true
    }

  export interface AutomoveisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Automoveis'], meta: { name: 'Automoveis' } }
    /**
     * Find zero or one Automoveis that matches the filter.
     * @param {AutomoveisFindUniqueArgs} args - Arguments to find a Automoveis
     * @example
     * // Get one Automoveis
     * const automoveis = await prisma.automoveis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AutomoveisFindUniqueArgs>(args: SelectSubset<T, AutomoveisFindUniqueArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Automoveis that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AutomoveisFindUniqueOrThrowArgs} args - Arguments to find a Automoveis
     * @example
     * // Get one Automoveis
     * const automoveis = await prisma.automoveis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AutomoveisFindUniqueOrThrowArgs>(args: SelectSubset<T, AutomoveisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Automoveis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisFindFirstArgs} args - Arguments to find a Automoveis
     * @example
     * // Get one Automoveis
     * const automoveis = await prisma.automoveis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AutomoveisFindFirstArgs>(args?: SelectSubset<T, AutomoveisFindFirstArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Automoveis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisFindFirstOrThrowArgs} args - Arguments to find a Automoveis
     * @example
     * // Get one Automoveis
     * const automoveis = await prisma.automoveis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AutomoveisFindFirstOrThrowArgs>(args?: SelectSubset<T, AutomoveisFindFirstOrThrowArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Automoveis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Automoveis
     * const automoveis = await prisma.automoveis.findMany()
     * 
     * // Get first 10 Automoveis
     * const automoveis = await prisma.automoveis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const automoveisWithIdOnly = await prisma.automoveis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AutomoveisFindManyArgs>(args?: SelectSubset<T, AutomoveisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Automoveis.
     * @param {AutomoveisCreateArgs} args - Arguments to create a Automoveis.
     * @example
     * // Create one Automoveis
     * const Automoveis = await prisma.automoveis.create({
     *   data: {
     *     // ... data to create a Automoveis
     *   }
     * })
     * 
     */
    create<T extends AutomoveisCreateArgs>(args: SelectSubset<T, AutomoveisCreateArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Automoveis.
     * @param {AutomoveisCreateManyArgs} args - Arguments to create many Automoveis.
     * @example
     * // Create many Automoveis
     * const automoveis = await prisma.automoveis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AutomoveisCreateManyArgs>(args?: SelectSubset<T, AutomoveisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Automoveis.
     * @param {AutomoveisDeleteArgs} args - Arguments to delete one Automoveis.
     * @example
     * // Delete one Automoveis
     * const Automoveis = await prisma.automoveis.delete({
     *   where: {
     *     // ... filter to delete one Automoveis
     *   }
     * })
     * 
     */
    delete<T extends AutomoveisDeleteArgs>(args: SelectSubset<T, AutomoveisDeleteArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Automoveis.
     * @param {AutomoveisUpdateArgs} args - Arguments to update one Automoveis.
     * @example
     * // Update one Automoveis
     * const automoveis = await prisma.automoveis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AutomoveisUpdateArgs>(args: SelectSubset<T, AutomoveisUpdateArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Automoveis.
     * @param {AutomoveisDeleteManyArgs} args - Arguments to filter Automoveis to delete.
     * @example
     * // Delete a few Automoveis
     * const { count } = await prisma.automoveis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AutomoveisDeleteManyArgs>(args?: SelectSubset<T, AutomoveisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Automoveis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Automoveis
     * const automoveis = await prisma.automoveis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AutomoveisUpdateManyArgs>(args: SelectSubset<T, AutomoveisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Automoveis.
     * @param {AutomoveisUpsertArgs} args - Arguments to update or create a Automoveis.
     * @example
     * // Update or create a Automoveis
     * const automoveis = await prisma.automoveis.upsert({
     *   create: {
     *     // ... data to create a Automoveis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Automoveis we want to update
     *   }
     * })
     */
    upsert<T extends AutomoveisUpsertArgs>(args: SelectSubset<T, AutomoveisUpsertArgs<ExtArgs>>): Prisma__AutomoveisClient<$Result.GetResult<Prisma.$AutomoveisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Automoveis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisCountArgs} args - Arguments to filter Automoveis to count.
     * @example
     * // Count the number of Automoveis
     * const count = await prisma.automoveis.count({
     *   where: {
     *     // ... the filter for the Automoveis we want to count
     *   }
     * })
    **/
    count<T extends AutomoveisCountArgs>(
      args?: Subset<T, AutomoveisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AutomoveisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Automoveis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AutomoveisAggregateArgs>(args: Subset<T, AutomoveisAggregateArgs>): Prisma.PrismaPromise<GetAutomoveisAggregateType<T>>

    /**
     * Group by Automoveis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutomoveisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AutomoveisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AutomoveisGroupByArgs['orderBy'] }
        : { orderBy?: AutomoveisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AutomoveisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAutomoveisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Automoveis model
   */
  readonly fields: AutomoveisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Automoveis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AutomoveisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alocacoes<T extends Automoveis$alocacoesArgs<ExtArgs> = {}>(args?: Subset<T, Automoveis$alocacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Automoveis model
   */ 
  interface AutomoveisFieldRefs {
    readonly id: FieldRef<"Automoveis", 'Int'>
    readonly modelo: FieldRef<"Automoveis", 'String'>
    readonly preco: FieldRef<"Automoveis", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Automoveis findUnique
   */
  export type AutomoveisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * Filter, which Automoveis to fetch.
     */
    where: AutomoveisWhereUniqueInput
  }

  /**
   * Automoveis findUniqueOrThrow
   */
  export type AutomoveisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * Filter, which Automoveis to fetch.
     */
    where: AutomoveisWhereUniqueInput
  }

  /**
   * Automoveis findFirst
   */
  export type AutomoveisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * Filter, which Automoveis to fetch.
     */
    where?: AutomoveisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automoveis to fetch.
     */
    orderBy?: AutomoveisOrderByWithRelationInput | AutomoveisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Automoveis.
     */
    cursor?: AutomoveisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automoveis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automoveis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Automoveis.
     */
    distinct?: AutomoveisScalarFieldEnum | AutomoveisScalarFieldEnum[]
  }

  /**
   * Automoveis findFirstOrThrow
   */
  export type AutomoveisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * Filter, which Automoveis to fetch.
     */
    where?: AutomoveisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automoveis to fetch.
     */
    orderBy?: AutomoveisOrderByWithRelationInput | AutomoveisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Automoveis.
     */
    cursor?: AutomoveisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automoveis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automoveis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Automoveis.
     */
    distinct?: AutomoveisScalarFieldEnum | AutomoveisScalarFieldEnum[]
  }

  /**
   * Automoveis findMany
   */
  export type AutomoveisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * Filter, which Automoveis to fetch.
     */
    where?: AutomoveisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Automoveis to fetch.
     */
    orderBy?: AutomoveisOrderByWithRelationInput | AutomoveisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Automoveis.
     */
    cursor?: AutomoveisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Automoveis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Automoveis.
     */
    skip?: number
    distinct?: AutomoveisScalarFieldEnum | AutomoveisScalarFieldEnum[]
  }

  /**
   * Automoveis create
   */
  export type AutomoveisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * The data needed to create a Automoveis.
     */
    data: XOR<AutomoveisCreateInput, AutomoveisUncheckedCreateInput>
  }

  /**
   * Automoveis createMany
   */
  export type AutomoveisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Automoveis.
     */
    data: AutomoveisCreateManyInput | AutomoveisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Automoveis update
   */
  export type AutomoveisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * The data needed to update a Automoveis.
     */
    data: XOR<AutomoveisUpdateInput, AutomoveisUncheckedUpdateInput>
    /**
     * Choose, which Automoveis to update.
     */
    where: AutomoveisWhereUniqueInput
  }

  /**
   * Automoveis updateMany
   */
  export type AutomoveisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Automoveis.
     */
    data: XOR<AutomoveisUpdateManyMutationInput, AutomoveisUncheckedUpdateManyInput>
    /**
     * Filter which Automoveis to update
     */
    where?: AutomoveisWhereInput
  }

  /**
   * Automoveis upsert
   */
  export type AutomoveisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * The filter to search for the Automoveis to update in case it exists.
     */
    where: AutomoveisWhereUniqueInput
    /**
     * In case the Automoveis found by the `where` argument doesn't exist, create a new Automoveis with this data.
     */
    create: XOR<AutomoveisCreateInput, AutomoveisUncheckedCreateInput>
    /**
     * In case the Automoveis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AutomoveisUpdateInput, AutomoveisUncheckedUpdateInput>
  }

  /**
   * Automoveis delete
   */
  export type AutomoveisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
    /**
     * Filter which Automoveis to delete.
     */
    where: AutomoveisWhereUniqueInput
  }

  /**
   * Automoveis deleteMany
   */
  export type AutomoveisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Automoveis to delete
     */
    where?: AutomoveisWhereInput
  }

  /**
   * Automoveis.alocacoes
   */
  export type Automoveis$alocacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    where?: AlocacaoWhereInput
    orderBy?: AlocacaoOrderByWithRelationInput | AlocacaoOrderByWithRelationInput[]
    cursor?: AlocacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlocacaoScalarFieldEnum | AlocacaoScalarFieldEnum[]
  }

  /**
   * Automoveis without action
   */
  export type AutomoveisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Automoveis
     */
    select?: AutomoveisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutomoveisInclude<ExtArgs> | null
  }


  /**
   * Model Concessionarias
   */

  export type AggregateConcessionarias = {
    _count: ConcessionariasCountAggregateOutputType | null
    _avg: ConcessionariasAvgAggregateOutputType | null
    _sum: ConcessionariasSumAggregateOutputType | null
    _min: ConcessionariasMinAggregateOutputType | null
    _max: ConcessionariasMaxAggregateOutputType | null
  }

  export type ConcessionariasAvgAggregateOutputType = {
    id: number | null
  }

  export type ConcessionariasSumAggregateOutputType = {
    id: number | null
  }

  export type ConcessionariasMinAggregateOutputType = {
    id: number | null
    concessionaria: string | null
  }

  export type ConcessionariasMaxAggregateOutputType = {
    id: number | null
    concessionaria: string | null
  }

  export type ConcessionariasCountAggregateOutputType = {
    id: number
    concessionaria: number
    _all: number
  }


  export type ConcessionariasAvgAggregateInputType = {
    id?: true
  }

  export type ConcessionariasSumAggregateInputType = {
    id?: true
  }

  export type ConcessionariasMinAggregateInputType = {
    id?: true
    concessionaria?: true
  }

  export type ConcessionariasMaxAggregateInputType = {
    id?: true
    concessionaria?: true
  }

  export type ConcessionariasCountAggregateInputType = {
    id?: true
    concessionaria?: true
    _all?: true
  }

  export type ConcessionariasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Concessionarias to aggregate.
     */
    where?: ConcessionariasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concessionarias to fetch.
     */
    orderBy?: ConcessionariasOrderByWithRelationInput | ConcessionariasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConcessionariasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concessionarias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concessionarias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Concessionarias
    **/
    _count?: true | ConcessionariasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConcessionariasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConcessionariasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConcessionariasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConcessionariasMaxAggregateInputType
  }

  export type GetConcessionariasAggregateType<T extends ConcessionariasAggregateArgs> = {
        [P in keyof T & keyof AggregateConcessionarias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConcessionarias[P]>
      : GetScalarType<T[P], AggregateConcessionarias[P]>
  }




  export type ConcessionariasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConcessionariasWhereInput
    orderBy?: ConcessionariasOrderByWithAggregationInput | ConcessionariasOrderByWithAggregationInput[]
    by: ConcessionariasScalarFieldEnum[] | ConcessionariasScalarFieldEnum
    having?: ConcessionariasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConcessionariasCountAggregateInputType | true
    _avg?: ConcessionariasAvgAggregateInputType
    _sum?: ConcessionariasSumAggregateInputType
    _min?: ConcessionariasMinAggregateInputType
    _max?: ConcessionariasMaxAggregateInputType
  }

  export type ConcessionariasGroupByOutputType = {
    id: number
    concessionaria: string
    _count: ConcessionariasCountAggregateOutputType | null
    _avg: ConcessionariasAvgAggregateOutputType | null
    _sum: ConcessionariasSumAggregateOutputType | null
    _min: ConcessionariasMinAggregateOutputType | null
    _max: ConcessionariasMaxAggregateOutputType | null
  }

  type GetConcessionariasGroupByPayload<T extends ConcessionariasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConcessionariasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConcessionariasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConcessionariasGroupByOutputType[P]>
            : GetScalarType<T[P], ConcessionariasGroupByOutputType[P]>
        }
      >
    >


  export type ConcessionariasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    concessionaria?: boolean
    alocacoes?: boolean | Concessionarias$alocacoesArgs<ExtArgs>
    _count?: boolean | ConcessionariasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["concessionarias"]>


  export type ConcessionariasSelectScalar = {
    id?: boolean
    concessionaria?: boolean
  }

  export type ConcessionariasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alocacoes?: boolean | Concessionarias$alocacoesArgs<ExtArgs>
    _count?: boolean | ConcessionariasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ConcessionariasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Concessionarias"
    objects: {
      alocacoes: Prisma.$AlocacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      concessionaria: string
    }, ExtArgs["result"]["concessionarias"]>
    composites: {}
  }

  type ConcessionariasGetPayload<S extends boolean | null | undefined | ConcessionariasDefaultArgs> = $Result.GetResult<Prisma.$ConcessionariasPayload, S>

  type ConcessionariasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConcessionariasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConcessionariasCountAggregateInputType | true
    }

  export interface ConcessionariasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Concessionarias'], meta: { name: 'Concessionarias' } }
    /**
     * Find zero or one Concessionarias that matches the filter.
     * @param {ConcessionariasFindUniqueArgs} args - Arguments to find a Concessionarias
     * @example
     * // Get one Concessionarias
     * const concessionarias = await prisma.concessionarias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConcessionariasFindUniqueArgs>(args: SelectSubset<T, ConcessionariasFindUniqueArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Concessionarias that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConcessionariasFindUniqueOrThrowArgs} args - Arguments to find a Concessionarias
     * @example
     * // Get one Concessionarias
     * const concessionarias = await prisma.concessionarias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConcessionariasFindUniqueOrThrowArgs>(args: SelectSubset<T, ConcessionariasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Concessionarias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasFindFirstArgs} args - Arguments to find a Concessionarias
     * @example
     * // Get one Concessionarias
     * const concessionarias = await prisma.concessionarias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConcessionariasFindFirstArgs>(args?: SelectSubset<T, ConcessionariasFindFirstArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Concessionarias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasFindFirstOrThrowArgs} args - Arguments to find a Concessionarias
     * @example
     * // Get one Concessionarias
     * const concessionarias = await prisma.concessionarias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConcessionariasFindFirstOrThrowArgs>(args?: SelectSubset<T, ConcessionariasFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Concessionarias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Concessionarias
     * const concessionarias = await prisma.concessionarias.findMany()
     * 
     * // Get first 10 Concessionarias
     * const concessionarias = await prisma.concessionarias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const concessionariasWithIdOnly = await prisma.concessionarias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConcessionariasFindManyArgs>(args?: SelectSubset<T, ConcessionariasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Concessionarias.
     * @param {ConcessionariasCreateArgs} args - Arguments to create a Concessionarias.
     * @example
     * // Create one Concessionarias
     * const Concessionarias = await prisma.concessionarias.create({
     *   data: {
     *     // ... data to create a Concessionarias
     *   }
     * })
     * 
     */
    create<T extends ConcessionariasCreateArgs>(args: SelectSubset<T, ConcessionariasCreateArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Concessionarias.
     * @param {ConcessionariasCreateManyArgs} args - Arguments to create many Concessionarias.
     * @example
     * // Create many Concessionarias
     * const concessionarias = await prisma.concessionarias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConcessionariasCreateManyArgs>(args?: SelectSubset<T, ConcessionariasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Concessionarias.
     * @param {ConcessionariasDeleteArgs} args - Arguments to delete one Concessionarias.
     * @example
     * // Delete one Concessionarias
     * const Concessionarias = await prisma.concessionarias.delete({
     *   where: {
     *     // ... filter to delete one Concessionarias
     *   }
     * })
     * 
     */
    delete<T extends ConcessionariasDeleteArgs>(args: SelectSubset<T, ConcessionariasDeleteArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Concessionarias.
     * @param {ConcessionariasUpdateArgs} args - Arguments to update one Concessionarias.
     * @example
     * // Update one Concessionarias
     * const concessionarias = await prisma.concessionarias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConcessionariasUpdateArgs>(args: SelectSubset<T, ConcessionariasUpdateArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Concessionarias.
     * @param {ConcessionariasDeleteManyArgs} args - Arguments to filter Concessionarias to delete.
     * @example
     * // Delete a few Concessionarias
     * const { count } = await prisma.concessionarias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConcessionariasDeleteManyArgs>(args?: SelectSubset<T, ConcessionariasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Concessionarias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Concessionarias
     * const concessionarias = await prisma.concessionarias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConcessionariasUpdateManyArgs>(args: SelectSubset<T, ConcessionariasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Concessionarias.
     * @param {ConcessionariasUpsertArgs} args - Arguments to update or create a Concessionarias.
     * @example
     * // Update or create a Concessionarias
     * const concessionarias = await prisma.concessionarias.upsert({
     *   create: {
     *     // ... data to create a Concessionarias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Concessionarias we want to update
     *   }
     * })
     */
    upsert<T extends ConcessionariasUpsertArgs>(args: SelectSubset<T, ConcessionariasUpsertArgs<ExtArgs>>): Prisma__ConcessionariasClient<$Result.GetResult<Prisma.$ConcessionariasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Concessionarias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasCountArgs} args - Arguments to filter Concessionarias to count.
     * @example
     * // Count the number of Concessionarias
     * const count = await prisma.concessionarias.count({
     *   where: {
     *     // ... the filter for the Concessionarias we want to count
     *   }
     * })
    **/
    count<T extends ConcessionariasCountArgs>(
      args?: Subset<T, ConcessionariasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConcessionariasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Concessionarias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConcessionariasAggregateArgs>(args: Subset<T, ConcessionariasAggregateArgs>): Prisma.PrismaPromise<GetConcessionariasAggregateType<T>>

    /**
     * Group by Concessionarias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConcessionariasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConcessionariasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConcessionariasGroupByArgs['orderBy'] }
        : { orderBy?: ConcessionariasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConcessionariasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConcessionariasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Concessionarias model
   */
  readonly fields: ConcessionariasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Concessionarias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConcessionariasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alocacoes<T extends Concessionarias$alocacoesArgs<ExtArgs> = {}>(args?: Subset<T, Concessionarias$alocacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlocacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Concessionarias model
   */ 
  interface ConcessionariasFieldRefs {
    readonly id: FieldRef<"Concessionarias", 'Int'>
    readonly concessionaria: FieldRef<"Concessionarias", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Concessionarias findUnique
   */
  export type ConcessionariasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * Filter, which Concessionarias to fetch.
     */
    where: ConcessionariasWhereUniqueInput
  }

  /**
   * Concessionarias findUniqueOrThrow
   */
  export type ConcessionariasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * Filter, which Concessionarias to fetch.
     */
    where: ConcessionariasWhereUniqueInput
  }

  /**
   * Concessionarias findFirst
   */
  export type ConcessionariasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * Filter, which Concessionarias to fetch.
     */
    where?: ConcessionariasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concessionarias to fetch.
     */
    orderBy?: ConcessionariasOrderByWithRelationInput | ConcessionariasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Concessionarias.
     */
    cursor?: ConcessionariasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concessionarias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concessionarias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Concessionarias.
     */
    distinct?: ConcessionariasScalarFieldEnum | ConcessionariasScalarFieldEnum[]
  }

  /**
   * Concessionarias findFirstOrThrow
   */
  export type ConcessionariasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * Filter, which Concessionarias to fetch.
     */
    where?: ConcessionariasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concessionarias to fetch.
     */
    orderBy?: ConcessionariasOrderByWithRelationInput | ConcessionariasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Concessionarias.
     */
    cursor?: ConcessionariasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concessionarias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concessionarias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Concessionarias.
     */
    distinct?: ConcessionariasScalarFieldEnum | ConcessionariasScalarFieldEnum[]
  }

  /**
   * Concessionarias findMany
   */
  export type ConcessionariasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * Filter, which Concessionarias to fetch.
     */
    where?: ConcessionariasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Concessionarias to fetch.
     */
    orderBy?: ConcessionariasOrderByWithRelationInput | ConcessionariasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Concessionarias.
     */
    cursor?: ConcessionariasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Concessionarias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Concessionarias.
     */
    skip?: number
    distinct?: ConcessionariasScalarFieldEnum | ConcessionariasScalarFieldEnum[]
  }

  /**
   * Concessionarias create
   */
  export type ConcessionariasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * The data needed to create a Concessionarias.
     */
    data: XOR<ConcessionariasCreateInput, ConcessionariasUncheckedCreateInput>
  }

  /**
   * Concessionarias createMany
   */
  export type ConcessionariasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Concessionarias.
     */
    data: ConcessionariasCreateManyInput | ConcessionariasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Concessionarias update
   */
  export type ConcessionariasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * The data needed to update a Concessionarias.
     */
    data: XOR<ConcessionariasUpdateInput, ConcessionariasUncheckedUpdateInput>
    /**
     * Choose, which Concessionarias to update.
     */
    where: ConcessionariasWhereUniqueInput
  }

  /**
   * Concessionarias updateMany
   */
  export type ConcessionariasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Concessionarias.
     */
    data: XOR<ConcessionariasUpdateManyMutationInput, ConcessionariasUncheckedUpdateManyInput>
    /**
     * Filter which Concessionarias to update
     */
    where?: ConcessionariasWhereInput
  }

  /**
   * Concessionarias upsert
   */
  export type ConcessionariasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * The filter to search for the Concessionarias to update in case it exists.
     */
    where: ConcessionariasWhereUniqueInput
    /**
     * In case the Concessionarias found by the `where` argument doesn't exist, create a new Concessionarias with this data.
     */
    create: XOR<ConcessionariasCreateInput, ConcessionariasUncheckedCreateInput>
    /**
     * In case the Concessionarias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConcessionariasUpdateInput, ConcessionariasUncheckedUpdateInput>
  }

  /**
   * Concessionarias delete
   */
  export type ConcessionariasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
    /**
     * Filter which Concessionarias to delete.
     */
    where: ConcessionariasWhereUniqueInput
  }

  /**
   * Concessionarias deleteMany
   */
  export type ConcessionariasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Concessionarias to delete
     */
    where?: ConcessionariasWhereInput
  }

  /**
   * Concessionarias.alocacoes
   */
  export type Concessionarias$alocacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alocacao
     */
    select?: AlocacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlocacaoInclude<ExtArgs> | null
    where?: AlocacaoWhereInput
    orderBy?: AlocacaoOrderByWithRelationInput | AlocacaoOrderByWithRelationInput[]
    cursor?: AlocacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlocacaoScalarFieldEnum | AlocacaoScalarFieldEnum[]
  }

  /**
   * Concessionarias without action
   */
  export type ConcessionariasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Concessionarias
     */
    select?: ConcessionariasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConcessionariasInclude<ExtArgs> | null
  }


  /**
   * Model clientes
   */

  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientesSumAggregateOutputType = {
    id: number | null
  }

  export type ClientesMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ClientesMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type ClientesCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    id?: true
  }

  export type ClientesSumAggregateInputType = {
    id?: true
  }

  export type ClientesMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ClientesMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ClientesCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type ClientesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to aggregate.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type clientesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientesWhereInput
    orderBy?: clientesOrderByWithAggregationInput | clientesOrderByWithAggregationInput[]
    by: ClientesScalarFieldEnum[] | ClientesScalarFieldEnum
    having?: clientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }

  export type ClientesGroupByOutputType = {
    id: number
    nome: string
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends clientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type clientesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["clientes"]>


  export type clientesSelectScalar = {
    id?: boolean
    nome?: boolean
  }


  export type $clientesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clientes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["clientes"]>
    composites: {}
  }

  type clientesGetPayload<S extends boolean | null | undefined | clientesDefaultArgs> = $Result.GetResult<Prisma.$clientesPayload, S>

  type clientesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<clientesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientesCountAggregateInputType | true
    }

  export interface clientesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clientes'], meta: { name: 'clientes' } }
    /**
     * Find zero or one Clientes that matches the filter.
     * @param {clientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientesFindUniqueArgs>(args: SelectSubset<T, clientesFindUniqueArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Clientes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {clientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientesFindUniqueOrThrowArgs>(args: SelectSubset<T, clientesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientesFindFirstArgs>(args?: SelectSubset<T, clientesFindFirstArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Clientes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientesFindFirstOrThrowArgs>(args?: SelectSubset<T, clientesFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientesWithIdOnly = await prisma.clientes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clientesFindManyArgs>(args?: SelectSubset<T, clientesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Clientes.
     * @param {clientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
     */
    create<T extends clientesCreateArgs>(args: SelectSubset<T, clientesCreateArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {clientesCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const clientes = await prisma.clientes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientesCreateManyArgs>(args?: SelectSubset<T, clientesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {clientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
     */
    delete<T extends clientesDeleteArgs>(args: SelectSubset<T, clientesDeleteArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Clientes.
     * @param {clientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientesUpdateArgs>(args: SelectSubset<T, clientesUpdateArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {clientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientesDeleteManyArgs>(args?: SelectSubset<T, clientesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientesUpdateManyArgs>(args: SelectSubset<T, clientesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {clientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
     */
    upsert<T extends clientesUpsertArgs>(args: SelectSubset<T, clientesUpsertArgs<ExtArgs>>): Prisma__clientesClient<$Result.GetResult<Prisma.$clientesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clientesCountArgs>(
      args?: Subset<T, clientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): Prisma.PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientesGroupByArgs['orderBy'] }
        : { orderBy?: clientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clientes model
   */
  readonly fields: clientesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the clientes model
   */ 
  interface clientesFieldRefs {
    readonly id: FieldRef<"clientes", 'Int'>
    readonly nome: FieldRef<"clientes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * clientes findUnique
   */
  export type clientesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes findUniqueOrThrow
   */
  export type clientesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes findFirst
   */
  export type clientesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }

  /**
   * clientes findFirstOrThrow
   */
  export type clientesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }

  /**
   * clientes findMany
   */
  export type clientesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }

  /**
   * clientes create
   */
  export type clientesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The data needed to create a clientes.
     */
    data: XOR<clientesCreateInput, clientesUncheckedCreateInput>
  }

  /**
   * clientes createMany
   */
  export type clientesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientes.
     */
    data: clientesCreateManyInput | clientesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clientes update
   */
  export type clientesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The data needed to update a clientes.
     */
    data: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
    /**
     * Choose, which clientes to update.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes updateMany
   */
  export type clientesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clientesWhereInput
  }

  /**
   * clientes upsert
   */
  export type clientesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The filter to search for the clientes to update in case it exists.
     */
    where: clientesWhereUniqueInput
    /**
     * In case the clientes found by the `where` argument doesn't exist, create a new clientes with this data.
     */
    create: XOR<clientesCreateInput, clientesUncheckedCreateInput>
    /**
     * In case the clientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
  }

  /**
   * clientes delete
   */
  export type clientesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter which clientes to delete.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes deleteMany
   */
  export type clientesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to delete
     */
    where?: clientesWhereInput
  }

  /**
   * clientes without action
   */
  export type clientesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AlocacaoScalarFieldEnum: {
    id: 'id',
    area: 'area',
    quantidade: 'quantidade',
    automovelId: 'automovelId',
    concessionariaId: 'concessionariaId'
  };

  export type AlocacaoScalarFieldEnum = (typeof AlocacaoScalarFieldEnum)[keyof typeof AlocacaoScalarFieldEnum]


  export const AutomoveisScalarFieldEnum: {
    id: 'id',
    modelo: 'modelo',
    preco: 'preco'
  };

  export type AutomoveisScalarFieldEnum = (typeof AutomoveisScalarFieldEnum)[keyof typeof AutomoveisScalarFieldEnum]


  export const ConcessionariasScalarFieldEnum: {
    id: 'id',
    concessionaria: 'concessionaria'
  };

  export type ConcessionariasScalarFieldEnum = (typeof ConcessionariasScalarFieldEnum)[keyof typeof ConcessionariasScalarFieldEnum]


  export const ClientesScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AlocacaoWhereInput = {
    AND?: AlocacaoWhereInput | AlocacaoWhereInput[]
    OR?: AlocacaoWhereInput[]
    NOT?: AlocacaoWhereInput | AlocacaoWhereInput[]
    id?: IntFilter<"Alocacao"> | number
    area?: StringFilter<"Alocacao"> | string
    quantidade?: IntFilter<"Alocacao"> | number
    automovelId?: IntFilter<"Alocacao"> | number
    concessionariaId?: IntFilter<"Alocacao"> | number
    automovel?: XOR<AutomoveisRelationFilter, AutomoveisWhereInput>
    concessionaria?: XOR<ConcessionariasRelationFilter, ConcessionariasWhereInput>
  }

  export type AlocacaoOrderByWithRelationInput = {
    id?: SortOrder
    area?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
    automovel?: AutomoveisOrderByWithRelationInput
    concessionaria?: ConcessionariasOrderByWithRelationInput
  }

  export type AlocacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlocacaoWhereInput | AlocacaoWhereInput[]
    OR?: AlocacaoWhereInput[]
    NOT?: AlocacaoWhereInput | AlocacaoWhereInput[]
    area?: StringFilter<"Alocacao"> | string
    quantidade?: IntFilter<"Alocacao"> | number
    automovelId?: IntFilter<"Alocacao"> | number
    concessionariaId?: IntFilter<"Alocacao"> | number
    automovel?: XOR<AutomoveisRelationFilter, AutomoveisWhereInput>
    concessionaria?: XOR<ConcessionariasRelationFilter, ConcessionariasWhereInput>
  }, "id">

  export type AlocacaoOrderByWithAggregationInput = {
    id?: SortOrder
    area?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
    _count?: AlocacaoCountOrderByAggregateInput
    _avg?: AlocacaoAvgOrderByAggregateInput
    _max?: AlocacaoMaxOrderByAggregateInput
    _min?: AlocacaoMinOrderByAggregateInput
    _sum?: AlocacaoSumOrderByAggregateInput
  }

  export type AlocacaoScalarWhereWithAggregatesInput = {
    AND?: AlocacaoScalarWhereWithAggregatesInput | AlocacaoScalarWhereWithAggregatesInput[]
    OR?: AlocacaoScalarWhereWithAggregatesInput[]
    NOT?: AlocacaoScalarWhereWithAggregatesInput | AlocacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alocacao"> | number
    area?: StringWithAggregatesFilter<"Alocacao"> | string
    quantidade?: IntWithAggregatesFilter<"Alocacao"> | number
    automovelId?: IntWithAggregatesFilter<"Alocacao"> | number
    concessionariaId?: IntWithAggregatesFilter<"Alocacao"> | number
  }

  export type AutomoveisWhereInput = {
    AND?: AutomoveisWhereInput | AutomoveisWhereInput[]
    OR?: AutomoveisWhereInput[]
    NOT?: AutomoveisWhereInput | AutomoveisWhereInput[]
    id?: IntFilter<"Automoveis"> | number
    modelo?: StringFilter<"Automoveis"> | string
    preco?: FloatFilter<"Automoveis"> | number
    alocacoes?: AlocacaoListRelationFilter
  }

  export type AutomoveisOrderByWithRelationInput = {
    id?: SortOrder
    modelo?: SortOrder
    preco?: SortOrder
    alocacoes?: AlocacaoOrderByRelationAggregateInput
  }

  export type AutomoveisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AutomoveisWhereInput | AutomoveisWhereInput[]
    OR?: AutomoveisWhereInput[]
    NOT?: AutomoveisWhereInput | AutomoveisWhereInput[]
    modelo?: StringFilter<"Automoveis"> | string
    preco?: FloatFilter<"Automoveis"> | number
    alocacoes?: AlocacaoListRelationFilter
  }, "id">

  export type AutomoveisOrderByWithAggregationInput = {
    id?: SortOrder
    modelo?: SortOrder
    preco?: SortOrder
    _count?: AutomoveisCountOrderByAggregateInput
    _avg?: AutomoveisAvgOrderByAggregateInput
    _max?: AutomoveisMaxOrderByAggregateInput
    _min?: AutomoveisMinOrderByAggregateInput
    _sum?: AutomoveisSumOrderByAggregateInput
  }

  export type AutomoveisScalarWhereWithAggregatesInput = {
    AND?: AutomoveisScalarWhereWithAggregatesInput | AutomoveisScalarWhereWithAggregatesInput[]
    OR?: AutomoveisScalarWhereWithAggregatesInput[]
    NOT?: AutomoveisScalarWhereWithAggregatesInput | AutomoveisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Automoveis"> | number
    modelo?: StringWithAggregatesFilter<"Automoveis"> | string
    preco?: FloatWithAggregatesFilter<"Automoveis"> | number
  }

  export type ConcessionariasWhereInput = {
    AND?: ConcessionariasWhereInput | ConcessionariasWhereInput[]
    OR?: ConcessionariasWhereInput[]
    NOT?: ConcessionariasWhereInput | ConcessionariasWhereInput[]
    id?: IntFilter<"Concessionarias"> | number
    concessionaria?: StringFilter<"Concessionarias"> | string
    alocacoes?: AlocacaoListRelationFilter
  }

  export type ConcessionariasOrderByWithRelationInput = {
    id?: SortOrder
    concessionaria?: SortOrder
    alocacoes?: AlocacaoOrderByRelationAggregateInput
  }

  export type ConcessionariasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConcessionariasWhereInput | ConcessionariasWhereInput[]
    OR?: ConcessionariasWhereInput[]
    NOT?: ConcessionariasWhereInput | ConcessionariasWhereInput[]
    concessionaria?: StringFilter<"Concessionarias"> | string
    alocacoes?: AlocacaoListRelationFilter
  }, "id">

  export type ConcessionariasOrderByWithAggregationInput = {
    id?: SortOrder
    concessionaria?: SortOrder
    _count?: ConcessionariasCountOrderByAggregateInput
    _avg?: ConcessionariasAvgOrderByAggregateInput
    _max?: ConcessionariasMaxOrderByAggregateInput
    _min?: ConcessionariasMinOrderByAggregateInput
    _sum?: ConcessionariasSumOrderByAggregateInput
  }

  export type ConcessionariasScalarWhereWithAggregatesInput = {
    AND?: ConcessionariasScalarWhereWithAggregatesInput | ConcessionariasScalarWhereWithAggregatesInput[]
    OR?: ConcessionariasScalarWhereWithAggregatesInput[]
    NOT?: ConcessionariasScalarWhereWithAggregatesInput | ConcessionariasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Concessionarias"> | number
    concessionaria?: StringWithAggregatesFilter<"Concessionarias"> | string
  }

  export type clientesWhereInput = {
    AND?: clientesWhereInput | clientesWhereInput[]
    OR?: clientesWhereInput[]
    NOT?: clientesWhereInput | clientesWhereInput[]
    id?: IntFilter<"clientes"> | number
    nome?: StringFilter<"clientes"> | string
  }

  export type clientesOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type clientesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: clientesWhereInput | clientesWhereInput[]
    OR?: clientesWhereInput[]
    NOT?: clientesWhereInput | clientesWhereInput[]
    nome?: StringFilter<"clientes"> | string
  }, "id">

  export type clientesOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: clientesCountOrderByAggregateInput
    _avg?: clientesAvgOrderByAggregateInput
    _max?: clientesMaxOrderByAggregateInput
    _min?: clientesMinOrderByAggregateInput
    _sum?: clientesSumOrderByAggregateInput
  }

  export type clientesScalarWhereWithAggregatesInput = {
    AND?: clientesScalarWhereWithAggregatesInput | clientesScalarWhereWithAggregatesInput[]
    OR?: clientesScalarWhereWithAggregatesInput[]
    NOT?: clientesScalarWhereWithAggregatesInput | clientesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"clientes"> | number
    nome?: StringWithAggregatesFilter<"clientes"> | string
  }

  export type AlocacaoCreateInput = {
    area: string
    quantidade: number
    automovel: AutomoveisCreateNestedOneWithoutAlocacoesInput
    concessionaria: ConcessionariasCreateNestedOneWithoutAlocacoesInput
  }

  export type AlocacaoUncheckedCreateInput = {
    id?: number
    area: string
    quantidade: number
    automovelId: number
    concessionariaId: number
  }

  export type AlocacaoUpdateInput = {
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    automovel?: AutomoveisUpdateOneRequiredWithoutAlocacoesNestedInput
    concessionaria?: ConcessionariasUpdateOneRequiredWithoutAlocacoesNestedInput
  }

  export type AlocacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    automovelId?: IntFieldUpdateOperationsInput | number
    concessionariaId?: IntFieldUpdateOperationsInput | number
  }

  export type AlocacaoCreateManyInput = {
    id?: number
    area: string
    quantidade: number
    automovelId: number
    concessionariaId: number
  }

  export type AlocacaoUpdateManyMutationInput = {
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type AlocacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    automovelId?: IntFieldUpdateOperationsInput | number
    concessionariaId?: IntFieldUpdateOperationsInput | number
  }

  export type AutomoveisCreateInput = {
    modelo: string
    preco: number
    alocacoes?: AlocacaoCreateNestedManyWithoutAutomovelInput
  }

  export type AutomoveisUncheckedCreateInput = {
    id?: number
    modelo: string
    preco: number
    alocacoes?: AlocacaoUncheckedCreateNestedManyWithoutAutomovelInput
  }

  export type AutomoveisUpdateInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    alocacoes?: AlocacaoUpdateManyWithoutAutomovelNestedInput
  }

  export type AutomoveisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    alocacoes?: AlocacaoUncheckedUpdateManyWithoutAutomovelNestedInput
  }

  export type AutomoveisCreateManyInput = {
    id?: number
    modelo: string
    preco: number
  }

  export type AutomoveisUpdateManyMutationInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
  }

  export type AutomoveisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
  }

  export type ConcessionariasCreateInput = {
    concessionaria: string
    alocacoes?: AlocacaoCreateNestedManyWithoutConcessionariaInput
  }

  export type ConcessionariasUncheckedCreateInput = {
    id?: number
    concessionaria: string
    alocacoes?: AlocacaoUncheckedCreateNestedManyWithoutConcessionariaInput
  }

  export type ConcessionariasUpdateInput = {
    concessionaria?: StringFieldUpdateOperationsInput | string
    alocacoes?: AlocacaoUpdateManyWithoutConcessionariaNestedInput
  }

  export type ConcessionariasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    concessionaria?: StringFieldUpdateOperationsInput | string
    alocacoes?: AlocacaoUncheckedUpdateManyWithoutConcessionariaNestedInput
  }

  export type ConcessionariasCreateManyInput = {
    id?: number
    concessionaria: string
  }

  export type ConcessionariasUpdateManyMutationInput = {
    concessionaria?: StringFieldUpdateOperationsInput | string
  }

  export type ConcessionariasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    concessionaria?: StringFieldUpdateOperationsInput | string
  }

  export type clientesCreateInput = {
    nome: string
  }

  export type clientesUncheckedCreateInput = {
    id?: number
    nome: string
  }

  export type clientesUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type clientesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type clientesCreateManyInput = {
    id?: number
    nome: string
  }

  export type clientesUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type clientesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AutomoveisRelationFilter = {
    is?: AutomoveisWhereInput
    isNot?: AutomoveisWhereInput
  }

  export type ConcessionariasRelationFilter = {
    is?: ConcessionariasWhereInput
    isNot?: ConcessionariasWhereInput
  }

  export type AlocacaoCountOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
  }

  export type AlocacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
  }

  export type AlocacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
  }

  export type AlocacaoMinOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
  }

  export type AlocacaoSumOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    automovelId?: SortOrder
    concessionariaId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type AlocacaoListRelationFilter = {
    every?: AlocacaoWhereInput
    some?: AlocacaoWhereInput
    none?: AlocacaoWhereInput
  }

  export type AlocacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AutomoveisCountOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    preco?: SortOrder
  }

  export type AutomoveisAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type AutomoveisMaxOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    preco?: SortOrder
  }

  export type AutomoveisMinOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    preco?: SortOrder
  }

  export type AutomoveisSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ConcessionariasCountOrderByAggregateInput = {
    id?: SortOrder
    concessionaria?: SortOrder
  }

  export type ConcessionariasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ConcessionariasMaxOrderByAggregateInput = {
    id?: SortOrder
    concessionaria?: SortOrder
  }

  export type ConcessionariasMinOrderByAggregateInput = {
    id?: SortOrder
    concessionaria?: SortOrder
  }

  export type ConcessionariasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientesCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type clientesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientesMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type clientesMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type clientesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AutomoveisCreateNestedOneWithoutAlocacoesInput = {
    create?: XOR<AutomoveisCreateWithoutAlocacoesInput, AutomoveisUncheckedCreateWithoutAlocacoesInput>
    connectOrCreate?: AutomoveisCreateOrConnectWithoutAlocacoesInput
    connect?: AutomoveisWhereUniqueInput
  }

  export type ConcessionariasCreateNestedOneWithoutAlocacoesInput = {
    create?: XOR<ConcessionariasCreateWithoutAlocacoesInput, ConcessionariasUncheckedCreateWithoutAlocacoesInput>
    connectOrCreate?: ConcessionariasCreateOrConnectWithoutAlocacoesInput
    connect?: ConcessionariasWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AutomoveisUpdateOneRequiredWithoutAlocacoesNestedInput = {
    create?: XOR<AutomoveisCreateWithoutAlocacoesInput, AutomoveisUncheckedCreateWithoutAlocacoesInput>
    connectOrCreate?: AutomoveisCreateOrConnectWithoutAlocacoesInput
    upsert?: AutomoveisUpsertWithoutAlocacoesInput
    connect?: AutomoveisWhereUniqueInput
    update?: XOR<XOR<AutomoveisUpdateToOneWithWhereWithoutAlocacoesInput, AutomoveisUpdateWithoutAlocacoesInput>, AutomoveisUncheckedUpdateWithoutAlocacoesInput>
  }

  export type ConcessionariasUpdateOneRequiredWithoutAlocacoesNestedInput = {
    create?: XOR<ConcessionariasCreateWithoutAlocacoesInput, ConcessionariasUncheckedCreateWithoutAlocacoesInput>
    connectOrCreate?: ConcessionariasCreateOrConnectWithoutAlocacoesInput
    upsert?: ConcessionariasUpsertWithoutAlocacoesInput
    connect?: ConcessionariasWhereUniqueInput
    update?: XOR<XOR<ConcessionariasUpdateToOneWithWhereWithoutAlocacoesInput, ConcessionariasUpdateWithoutAlocacoesInput>, ConcessionariasUncheckedUpdateWithoutAlocacoesInput>
  }

  export type AlocacaoCreateNestedManyWithoutAutomovelInput = {
    create?: XOR<AlocacaoCreateWithoutAutomovelInput, AlocacaoUncheckedCreateWithoutAutomovelInput> | AlocacaoCreateWithoutAutomovelInput[] | AlocacaoUncheckedCreateWithoutAutomovelInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutAutomovelInput | AlocacaoCreateOrConnectWithoutAutomovelInput[]
    createMany?: AlocacaoCreateManyAutomovelInputEnvelope
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
  }

  export type AlocacaoUncheckedCreateNestedManyWithoutAutomovelInput = {
    create?: XOR<AlocacaoCreateWithoutAutomovelInput, AlocacaoUncheckedCreateWithoutAutomovelInput> | AlocacaoCreateWithoutAutomovelInput[] | AlocacaoUncheckedCreateWithoutAutomovelInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutAutomovelInput | AlocacaoCreateOrConnectWithoutAutomovelInput[]
    createMany?: AlocacaoCreateManyAutomovelInputEnvelope
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlocacaoUpdateManyWithoutAutomovelNestedInput = {
    create?: XOR<AlocacaoCreateWithoutAutomovelInput, AlocacaoUncheckedCreateWithoutAutomovelInput> | AlocacaoCreateWithoutAutomovelInput[] | AlocacaoUncheckedCreateWithoutAutomovelInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutAutomovelInput | AlocacaoCreateOrConnectWithoutAutomovelInput[]
    upsert?: AlocacaoUpsertWithWhereUniqueWithoutAutomovelInput | AlocacaoUpsertWithWhereUniqueWithoutAutomovelInput[]
    createMany?: AlocacaoCreateManyAutomovelInputEnvelope
    set?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    disconnect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    delete?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    update?: AlocacaoUpdateWithWhereUniqueWithoutAutomovelInput | AlocacaoUpdateWithWhereUniqueWithoutAutomovelInput[]
    updateMany?: AlocacaoUpdateManyWithWhereWithoutAutomovelInput | AlocacaoUpdateManyWithWhereWithoutAutomovelInput[]
    deleteMany?: AlocacaoScalarWhereInput | AlocacaoScalarWhereInput[]
  }

  export type AlocacaoUncheckedUpdateManyWithoutAutomovelNestedInput = {
    create?: XOR<AlocacaoCreateWithoutAutomovelInput, AlocacaoUncheckedCreateWithoutAutomovelInput> | AlocacaoCreateWithoutAutomovelInput[] | AlocacaoUncheckedCreateWithoutAutomovelInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutAutomovelInput | AlocacaoCreateOrConnectWithoutAutomovelInput[]
    upsert?: AlocacaoUpsertWithWhereUniqueWithoutAutomovelInput | AlocacaoUpsertWithWhereUniqueWithoutAutomovelInput[]
    createMany?: AlocacaoCreateManyAutomovelInputEnvelope
    set?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    disconnect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    delete?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    update?: AlocacaoUpdateWithWhereUniqueWithoutAutomovelInput | AlocacaoUpdateWithWhereUniqueWithoutAutomovelInput[]
    updateMany?: AlocacaoUpdateManyWithWhereWithoutAutomovelInput | AlocacaoUpdateManyWithWhereWithoutAutomovelInput[]
    deleteMany?: AlocacaoScalarWhereInput | AlocacaoScalarWhereInput[]
  }

  export type AlocacaoCreateNestedManyWithoutConcessionariaInput = {
    create?: XOR<AlocacaoCreateWithoutConcessionariaInput, AlocacaoUncheckedCreateWithoutConcessionariaInput> | AlocacaoCreateWithoutConcessionariaInput[] | AlocacaoUncheckedCreateWithoutConcessionariaInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutConcessionariaInput | AlocacaoCreateOrConnectWithoutConcessionariaInput[]
    createMany?: AlocacaoCreateManyConcessionariaInputEnvelope
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
  }

  export type AlocacaoUncheckedCreateNestedManyWithoutConcessionariaInput = {
    create?: XOR<AlocacaoCreateWithoutConcessionariaInput, AlocacaoUncheckedCreateWithoutConcessionariaInput> | AlocacaoCreateWithoutConcessionariaInput[] | AlocacaoUncheckedCreateWithoutConcessionariaInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutConcessionariaInput | AlocacaoCreateOrConnectWithoutConcessionariaInput[]
    createMany?: AlocacaoCreateManyConcessionariaInputEnvelope
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
  }

  export type AlocacaoUpdateManyWithoutConcessionariaNestedInput = {
    create?: XOR<AlocacaoCreateWithoutConcessionariaInput, AlocacaoUncheckedCreateWithoutConcessionariaInput> | AlocacaoCreateWithoutConcessionariaInput[] | AlocacaoUncheckedCreateWithoutConcessionariaInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutConcessionariaInput | AlocacaoCreateOrConnectWithoutConcessionariaInput[]
    upsert?: AlocacaoUpsertWithWhereUniqueWithoutConcessionariaInput | AlocacaoUpsertWithWhereUniqueWithoutConcessionariaInput[]
    createMany?: AlocacaoCreateManyConcessionariaInputEnvelope
    set?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    disconnect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    delete?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    update?: AlocacaoUpdateWithWhereUniqueWithoutConcessionariaInput | AlocacaoUpdateWithWhereUniqueWithoutConcessionariaInput[]
    updateMany?: AlocacaoUpdateManyWithWhereWithoutConcessionariaInput | AlocacaoUpdateManyWithWhereWithoutConcessionariaInput[]
    deleteMany?: AlocacaoScalarWhereInput | AlocacaoScalarWhereInput[]
  }

  export type AlocacaoUncheckedUpdateManyWithoutConcessionariaNestedInput = {
    create?: XOR<AlocacaoCreateWithoutConcessionariaInput, AlocacaoUncheckedCreateWithoutConcessionariaInput> | AlocacaoCreateWithoutConcessionariaInput[] | AlocacaoUncheckedCreateWithoutConcessionariaInput[]
    connectOrCreate?: AlocacaoCreateOrConnectWithoutConcessionariaInput | AlocacaoCreateOrConnectWithoutConcessionariaInput[]
    upsert?: AlocacaoUpsertWithWhereUniqueWithoutConcessionariaInput | AlocacaoUpsertWithWhereUniqueWithoutConcessionariaInput[]
    createMany?: AlocacaoCreateManyConcessionariaInputEnvelope
    set?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    disconnect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    delete?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    connect?: AlocacaoWhereUniqueInput | AlocacaoWhereUniqueInput[]
    update?: AlocacaoUpdateWithWhereUniqueWithoutConcessionariaInput | AlocacaoUpdateWithWhereUniqueWithoutConcessionariaInput[]
    updateMany?: AlocacaoUpdateManyWithWhereWithoutConcessionariaInput | AlocacaoUpdateManyWithWhereWithoutConcessionariaInput[]
    deleteMany?: AlocacaoScalarWhereInput | AlocacaoScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AutomoveisCreateWithoutAlocacoesInput = {
    modelo: string
    preco: number
  }

  export type AutomoveisUncheckedCreateWithoutAlocacoesInput = {
    id?: number
    modelo: string
    preco: number
  }

  export type AutomoveisCreateOrConnectWithoutAlocacoesInput = {
    where: AutomoveisWhereUniqueInput
    create: XOR<AutomoveisCreateWithoutAlocacoesInput, AutomoveisUncheckedCreateWithoutAlocacoesInput>
  }

  export type ConcessionariasCreateWithoutAlocacoesInput = {
    concessionaria: string
  }

  export type ConcessionariasUncheckedCreateWithoutAlocacoesInput = {
    id?: number
    concessionaria: string
  }

  export type ConcessionariasCreateOrConnectWithoutAlocacoesInput = {
    where: ConcessionariasWhereUniqueInput
    create: XOR<ConcessionariasCreateWithoutAlocacoesInput, ConcessionariasUncheckedCreateWithoutAlocacoesInput>
  }

  export type AutomoveisUpsertWithoutAlocacoesInput = {
    update: XOR<AutomoveisUpdateWithoutAlocacoesInput, AutomoveisUncheckedUpdateWithoutAlocacoesInput>
    create: XOR<AutomoveisCreateWithoutAlocacoesInput, AutomoveisUncheckedCreateWithoutAlocacoesInput>
    where?: AutomoveisWhereInput
  }

  export type AutomoveisUpdateToOneWithWhereWithoutAlocacoesInput = {
    where?: AutomoveisWhereInput
    data: XOR<AutomoveisUpdateWithoutAlocacoesInput, AutomoveisUncheckedUpdateWithoutAlocacoesInput>
  }

  export type AutomoveisUpdateWithoutAlocacoesInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
  }

  export type AutomoveisUncheckedUpdateWithoutAlocacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
  }

  export type ConcessionariasUpsertWithoutAlocacoesInput = {
    update: XOR<ConcessionariasUpdateWithoutAlocacoesInput, ConcessionariasUncheckedUpdateWithoutAlocacoesInput>
    create: XOR<ConcessionariasCreateWithoutAlocacoesInput, ConcessionariasUncheckedCreateWithoutAlocacoesInput>
    where?: ConcessionariasWhereInput
  }

  export type ConcessionariasUpdateToOneWithWhereWithoutAlocacoesInput = {
    where?: ConcessionariasWhereInput
    data: XOR<ConcessionariasUpdateWithoutAlocacoesInput, ConcessionariasUncheckedUpdateWithoutAlocacoesInput>
  }

  export type ConcessionariasUpdateWithoutAlocacoesInput = {
    concessionaria?: StringFieldUpdateOperationsInput | string
  }

  export type ConcessionariasUncheckedUpdateWithoutAlocacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    concessionaria?: StringFieldUpdateOperationsInput | string
  }

  export type AlocacaoCreateWithoutAutomovelInput = {
    area: string
    quantidade: number
    concessionaria: ConcessionariasCreateNestedOneWithoutAlocacoesInput
  }

  export type AlocacaoUncheckedCreateWithoutAutomovelInput = {
    id?: number
    area: string
    quantidade: number
    concessionariaId: number
  }

  export type AlocacaoCreateOrConnectWithoutAutomovelInput = {
    where: AlocacaoWhereUniqueInput
    create: XOR<AlocacaoCreateWithoutAutomovelInput, AlocacaoUncheckedCreateWithoutAutomovelInput>
  }

  export type AlocacaoCreateManyAutomovelInputEnvelope = {
    data: AlocacaoCreateManyAutomovelInput | AlocacaoCreateManyAutomovelInput[]
    skipDuplicates?: boolean
  }

  export type AlocacaoUpsertWithWhereUniqueWithoutAutomovelInput = {
    where: AlocacaoWhereUniqueInput
    update: XOR<AlocacaoUpdateWithoutAutomovelInput, AlocacaoUncheckedUpdateWithoutAutomovelInput>
    create: XOR<AlocacaoCreateWithoutAutomovelInput, AlocacaoUncheckedCreateWithoutAutomovelInput>
  }

  export type AlocacaoUpdateWithWhereUniqueWithoutAutomovelInput = {
    where: AlocacaoWhereUniqueInput
    data: XOR<AlocacaoUpdateWithoutAutomovelInput, AlocacaoUncheckedUpdateWithoutAutomovelInput>
  }

  export type AlocacaoUpdateManyWithWhereWithoutAutomovelInput = {
    where: AlocacaoScalarWhereInput
    data: XOR<AlocacaoUpdateManyMutationInput, AlocacaoUncheckedUpdateManyWithoutAutomovelInput>
  }

  export type AlocacaoScalarWhereInput = {
    AND?: AlocacaoScalarWhereInput | AlocacaoScalarWhereInput[]
    OR?: AlocacaoScalarWhereInput[]
    NOT?: AlocacaoScalarWhereInput | AlocacaoScalarWhereInput[]
    id?: IntFilter<"Alocacao"> | number
    area?: StringFilter<"Alocacao"> | string
    quantidade?: IntFilter<"Alocacao"> | number
    automovelId?: IntFilter<"Alocacao"> | number
    concessionariaId?: IntFilter<"Alocacao"> | number
  }

  export type AlocacaoCreateWithoutConcessionariaInput = {
    area: string
    quantidade: number
    automovel: AutomoveisCreateNestedOneWithoutAlocacoesInput
  }

  export type AlocacaoUncheckedCreateWithoutConcessionariaInput = {
    id?: number
    area: string
    quantidade: number
    automovelId: number
  }

  export type AlocacaoCreateOrConnectWithoutConcessionariaInput = {
    where: AlocacaoWhereUniqueInput
    create: XOR<AlocacaoCreateWithoutConcessionariaInput, AlocacaoUncheckedCreateWithoutConcessionariaInput>
  }

  export type AlocacaoCreateManyConcessionariaInputEnvelope = {
    data: AlocacaoCreateManyConcessionariaInput | AlocacaoCreateManyConcessionariaInput[]
    skipDuplicates?: boolean
  }

  export type AlocacaoUpsertWithWhereUniqueWithoutConcessionariaInput = {
    where: AlocacaoWhereUniqueInput
    update: XOR<AlocacaoUpdateWithoutConcessionariaInput, AlocacaoUncheckedUpdateWithoutConcessionariaInput>
    create: XOR<AlocacaoCreateWithoutConcessionariaInput, AlocacaoUncheckedCreateWithoutConcessionariaInput>
  }

  export type AlocacaoUpdateWithWhereUniqueWithoutConcessionariaInput = {
    where: AlocacaoWhereUniqueInput
    data: XOR<AlocacaoUpdateWithoutConcessionariaInput, AlocacaoUncheckedUpdateWithoutConcessionariaInput>
  }

  export type AlocacaoUpdateManyWithWhereWithoutConcessionariaInput = {
    where: AlocacaoScalarWhereInput
    data: XOR<AlocacaoUpdateManyMutationInput, AlocacaoUncheckedUpdateManyWithoutConcessionariaInput>
  }

  export type AlocacaoCreateManyAutomovelInput = {
    id?: number
    area: string
    quantidade: number
    concessionariaId: number
  }

  export type AlocacaoUpdateWithoutAutomovelInput = {
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    concessionaria?: ConcessionariasUpdateOneRequiredWithoutAlocacoesNestedInput
  }

  export type AlocacaoUncheckedUpdateWithoutAutomovelInput = {
    id?: IntFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    concessionariaId?: IntFieldUpdateOperationsInput | number
  }

  export type AlocacaoUncheckedUpdateManyWithoutAutomovelInput = {
    id?: IntFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    concessionariaId?: IntFieldUpdateOperationsInput | number
  }

  export type AlocacaoCreateManyConcessionariaInput = {
    id?: number
    area: string
    quantidade: number
    automovelId: number
  }

  export type AlocacaoUpdateWithoutConcessionariaInput = {
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    automovel?: AutomoveisUpdateOneRequiredWithoutAlocacoesNestedInput
  }

  export type AlocacaoUncheckedUpdateWithoutConcessionariaInput = {
    id?: IntFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    automovelId?: IntFieldUpdateOperationsInput | number
  }

  export type AlocacaoUncheckedUpdateManyWithoutConcessionariaInput = {
    id?: IntFieldUpdateOperationsInput | number
    area?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    automovelId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AutomoveisCountOutputTypeDefaultArgs instead
     */
    export type AutomoveisCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AutomoveisCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConcessionariasCountOutputTypeDefaultArgs instead
     */
    export type ConcessionariasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConcessionariasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlocacaoDefaultArgs instead
     */
    export type AlocacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlocacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AutomoveisDefaultArgs instead
     */
    export type AutomoveisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AutomoveisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConcessionariasDefaultArgs instead
     */
    export type ConcessionariasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConcessionariasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use clientesDefaultArgs instead
     */
    export type clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = clientesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}